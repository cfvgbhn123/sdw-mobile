/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 21);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// this module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  scopeId,
  cssModules
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  // inject cssModules
  if (cssModules) {
    var computed = Object.create(options.computed || null)
    Object.keys(cssModules).forEach(function (key) {
      var module = cssModules[key]
      computed[key] = function () { return module }
    })
    options.computed = computed
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 1 */
/***/ (function(module, exports) {

/**
 * Created by CHEN-BAO-DENG on 2017/3/13.
 */
function DragTouch(option) {

    this.id = option.id || '';
    this.adsorbed = option.adsorbed || true;
    this.duration = option.duration || 0.3;
    this.position = option.position || '1,0.5';
    this.adsorb = option.adsorb || false;

    this.notRotate = option.notRotate || false;

    this.init(option);
    return this;
}

DragTouch.prototype.init = function (option) {

    if (!this.id) return;
    this.target = document.querySelector(this.id);

    this.WIDTH = document.documentElement.clientWidth || document.body.clientWidth;
    this.HEIGHT = document.documentElement.clientHeight || document.body.clientHeight;
    this.offX = 0;
    this.offY = 0;

    this.width = option.width || this.target.offsetWidth;
    this.height = option.height || this.target.offsetHeight;

    if (option.width) {
        this.target.style.width = option.width + 'px';
    }

    if (option.height) {

        this.target.style.height = option.height + 'px';
    }

    this.tapFlag = false;
    this.timer = null;
    this.hasMove = false;

    var pos = this.position.split(',');
    var left = parseFloat(pos[0]) * (this.WIDTH - this.width) >> 0;

    // CP的初始化位置
    var y = window.touch_initY || parseFloat(pos[1]);
    var top = y * (this.HEIGHT - this.height) >> 0;

    this.top = top;
    this.left = left;
    this.hiddenState();

    // var _transStr = 'translate3d(' + left + 'px,' + top + 'px,0)';
    //
    // this.target.style.transform = this.target.style.webkitTransform = _transStr;
    // this.target.style.opacity = '0.5';

    this.target.addEventListener('touchstart', this.touchDown.bind(this), false);
    document.addEventListener('touchmove', this.touchMove.bind(this), false);
    this.target.addEventListener('touchend', this.touchUp.bind(this), false);

    // this.target.addEventListener('mousedown', this.touchDown.bind(this), false);
    // document.addEventListener('mousemove', this.touchMove.bind(this), false);
    // document.addEventListener('mouseup', this.touchUp.bind(this), false);
};

// 对视图进行更新
DragTouch.prototype.update = function () {

    this.WIDTH = document.documentElement.clientWidth || document.body.clientWidth;
    this.HEIGHT = document.documentElement.clientHeight || document.body.clientHeight;

    var left = this.WIDTH - this.width;
    var top = 0;

    this.top = top;
    this.left = left;

    var _transTimer = 'cubic-bezier(0.5,1.95,.49,.73)  ' + this.duration + 's';
    this.target.style.webkitTransition = this.target.style.transition = _transTimer;

    var _transStr = 'translate3d(' + left + 'px,' + top + 'px,0)';
    this.target.style.webkitTransform = this.target.style.transform = _transStr;
};

// y => 0.5

DragTouch.prototype.setPositionY = function (y, update) {
    var top = this.HEIGHT * (y || 0.5) - this.height / 2;

    top = Math.max(0, top);
    top = Math.min(this.HEIGHT - this.height, top);

    this.top = top;
    var _transStr = 'translate3d(' + this.left + 'px,' + top + 'px,0)';
    this.target.style.webkitTransform = this.target.style.transform = _transStr;
    if (!update) {
        this.hiddenState();
    }
};

DragTouch.prototype.touchDown = function (e) {
    e.preventDefault();
    // e.stopPropagation();

    if (this.tapFlag) return;

    this.hasMove = false;

    this.target.style.opacity = '1';
    var c = this.target.getBoundingClientRect();

    if (e.touches) {
        var touch = e.touches[0];
    } else {
        var touch = e;
    }

    this.offX = touch.clientX - c.left;
    this.offY = touch.clientY - c.top;

    this.tapFlag = true;

    this.clearTimer();
    this.touchMove(e); // 初始的时候归位

    this.target.style.transition = this.target.style.webkitTransition = 'none';
};

DragTouch.prototype.touchMove = function (e) {

    if (!this.tapFlag) return;
    // e.preventDefault();
    // e.stopPropagation();
    this.hasMove = true;

    // 判断是touch还是mouse事件
    if (e.changedTouches) {
        var touch = e.changedTouches[0];
    } else {
        var touch = e;
    }

    var top = touch.clientY - this.offY;
    var left = touch.clientX - this.offX;

    top = Math.max(0, top);
    top = Math.min(this.HEIGHT - this.height, top);

    left = Math.max(0, left);
    left = Math.min(this.WIDTH - this.width, left);

    var str = 'translate3d(' + left + 'px,' + top + 'px,0)';
    this.target.style.transform = this.target.style.webkitTransform = str;
};

DragTouch.prototype.touchUp = function (e) {
    e.preventDefault();

    // e.stopPropagation();
    if (!this.tapFlag) return;

    this.tapFlag = false;

    if (e.changedTouches) {
        var touch = e.changedTouches[0];
    } else {
        var touch = e;
    }

    var left = touch.clientX - this.offX;
    var top = touch.clientY - this.offY;

    // 限定移动尺寸
    top = Math.max(0, top);
    top = Math.min(this.HEIGHT - this.height, top);

    if (left <= this.WIDTH / 2 - this.width / 2 && this.adsorb) {
        left = 0;
    } else {
        left = this.WIDTH - this.width;
    }

    this.top = top;
    this.left = left;

    this.target.style.webkitTransition = 'cubic-bezier(0.5,1.95,.49,.73)  ' + this.duration + 's';
    this.target.style.transition = 'cubic-bezier(0.5,1.95,.49,.73)  ' + this.duration + 's';

    this.target.style.webkitTransform = 'translate3d(' + left + 'px,' + top + 'px,0)';
    this.target.style.transform = 'translate3d(' + left + 'px,' + top + 'px,0)';

    this.timer = setTimeout(function () {
        this.hiddenState();
    }.bind(this), 2000);

    if (!this.hasMove) {
        // alert(e.target.className)
        var isCanvas = e.target.tagName.toLocaleLowerCase() == 'canvas';
        // alert(isCanvas)
        if (e.target.className == 'barrage-cont' || e.target.className == 'barrage-text' || isCanvas) {
            this.target.click();
        }
    }
};

DragTouch.prototype.clearTimer = function () {
    clearTimeout(this.timer);
};

// 收起状态
DragTouch.prototype.hiddenState = function () {

    this.target.style.opacity = '0.7';

    if (this.notRotate) {
        var left = this.left;
        var str = 'translate3d(' + left + 'px,' + this.top + 'px,0)';
    } else {
        var left = this.left + this.width / 2;
        var str = 'translate3d(' + left + 'px,' + this.top + 'px,0) rotate(-45deg)';
    }

    this.target.style.webkitTransform = this.target.style.transform = str;
};

module.exports = DragTouch;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

/**
 * Created by CHEN-BAO-DENG on 2017/12/18 0018.
 */

function Loader(option) {
    option = option || {};

    this.files = option.files || [];
    this.loaded = 0;
    this.loadLength = this.files.length;
    this.RES = {};

    if (typeof option.callback === 'function') {
        this.callback = option.callback;
    }

    for (var i = 0; i < this.loadLength; i++) {
        this.loadFile(this.files[i]);
    }
}

Loader.prototype.loadFile = function (url) {
    var self = this;
    var img = new Image();
    img.src = url;
    img.onload = function () {
        self.loadedFile(url, img);
    };
};

Loader.prototype.loadedFile = function (url, file) {

    this.RES[url] = file;
    this.loaded++;
    if (this.loaded === this.loadLength) {
        this.callback && this.callback();
    }
};

Loader.prototype.getRes = function (url) {
    var file = this.RES[url];
    if (file) {
        return file;
    }
    return null;
};

function getNumberInNormalDistribution(mean, std_dev) {
    return mean + uniform2NormalDistribution() * std_dev;
}

function uniform2NormalDistribution() {
    var sum = 0.0;
    for (var i = 0; i < 12; i++) {
        sum = sum + Math.random();
    }
    return sum - 6.0;
}

// 一个简单的对象
function SimpleObj(option) {
    option = option || {};
    this.dom = option.dom;
    this.angle = option.angle;
    this.vAngle = option.vAngle;
}

function DropAnimation(option) {

    option = option || {};

    this.textures = option.textures;
    this.ended = false;
    this.oFragment = document.createDocumentFragment();
    this.num = option.num || 15;

    this.finished = 0;

    this.OS = {
        DPI: 2,
        width: document.documentElement.clientWidth,
        height: document.documentElement.clientHeight
    };

    this.dropList = [];
    this.SIN_MAP = {};

    if (typeof option.startCallback === 'function') {
        this.startCallback = option.startCallback;
    }
    if (typeof option.endCallback === 'function') {
        this.endCallback = option.endCallback;
    }
    this.init();
}

DropAnimation.prototype.init = function () {
    var self = this;
    this.loader = new Loader({
        files: self.textures,
        callback: function () {

            var pDiv = document.createElement('div');
            pDiv.style.position = 'fixed';
            document.body.appendChild(pDiv);
            self.stage = pDiv;

            for (var i = 0; i < self.num; i++) {
                var index = i % self.textures.length;
                var texture = self.loader.getRes(self.textures[index]);
                self.createDropItem(texture);
            }
            pDiv.appendChild(self.oFragment);
            document.body.appendChild(pDiv);
            self.update();

            self.startCallback && self.startCallback();
        }
    });
};

DropAnimation.prototype.getSin = function (angle) {

    if (this.SIN_MAP[angle]) {
        return this.SIN_MAP[angle];
    }

    this.SIN_MAP[angle] = Math.sin(angle);
    return this.SIN_MAP[angle];
};

DropAnimation.prototype.createDropItem = function (texture) {

    var div = document.createElement('div');
    div.className = 'drop-item';
    div.style.width = texture.width / this.OS.DPI + 'px';
    div.style.height = texture.height / this.OS.DPI + 'px';
    div.style.backgroundImage = 'url(' + texture.src + ')';
    this.oFragment.appendChild(div);

    // 正态分布
    var x = getNumberInNormalDistribution(this.OS.width / 2, this.OS.width / 3.4);

    var obj = new SimpleObj({
        dom: div,
        angle: Math.PI * Math.random(),
        vAngle: 0.02 * Math.random() + 0.01
    });

    this.dropList.push(obj);

    this.setDropItemSpeed(obj, Math.random() * 40 + 20, Math.random() * 2.4 + 2);

    this.setDropItemPosition(obj, x, -Math.random() * texture.height * 4 - 30);

    this._setPosition(obj);
};

DropAnimation.prototype.setDropItemPosition = function (item, x, y) {
    item.x = x;
    item.sx = item.sx || x;
    item.y = y;
};

DropAnimation.prototype._setPosition = function (item) {
    if (item.dom) {
        var positionStr = 'translate3d(' + item.x + 'px,' + item.y + 'px,0)';
        // item.style.transform = 'translate3d(' + x + 'px,' + y + 'px,0) scale(' + item.scale + ') rotate(' + item.rotate + 'deg)';
        item.dom.style.transform = item.dom.style.webkitTransform = positionStr;
    }
};

DropAnimation.prototype.setDropItemSpeed = function (item, vx, vy) {
    item.vx = vx;
    item.vy = vy;
};

DropAnimation.prototype.update = function () {

    if (this.ended) return;

    window.requestAnimationFrame(this.update.bind(this));

    // var scale = 60 / this.getFPS();
    for (var i = 0; i < this.dropList.length; ++i) {
        var item = this.dropList[i];

        var y = item.y + item.vy;
        // 进行预判断
        if (y > this.OS.height) {

            // document.body.removeChild(item.dom);
            item.dom.style.display = 'none';
            this.dropList.splice(i, 1);
            // this.finished++;
            item = null; // 手动释放

            if (this.dropList.length === 0) {
                this.ended = true;
                this.stage.parentNode.removeChild(this.stage);
                this.endCallback && this.endCallback();
                return;
            }
        } else {
            item.angle += item.vAngle;
            if (item.angle > 2 * Math.PI) {
                item.angle = 0;
            }
            var vx = this.getSin(item.angle) * item.vx;

            item.vy += 0.0013;

            var x = item.sx + vx;
            this.setDropItemPosition(item, x, y);
        }
    }

    // 单独渲染
    for (var i = 0; i < this.dropList.length; i++) {
        var item = this.dropList[i];
        this._setPosition(item);
    }
};

module.exports = DropAnimation;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 4 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 5 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 6 */
/***/ (function(module, exports) {

/**
 * Created by CHEN-BAO-DENG on 2017/12/15 0015.
 *
 * 活动入口及展示的配置
 *
 * 目前关联处：index、game
 *
 */

var ActivityConfig = {

    // 活动总体的类型
    activityType: '',
    activityPage: 'http://www.shandw.com/activities/laborDay2019/index.html',
    title: '活动提醒',
    desc: '即将前往【组队拿红包】<br>活动会场',
    // 首页悬浮窗的类型
    toolIconType: 'newyear',
    activityName: '红包',
    // 首页主按钮的类型
    menuType: '',

    // 小的导航栏
    navType: '',

    // 签到的类型
    checkInType: '',

    // 首页节日素材掉落的类型
    // dropType: {
    //
    //     textures: [
    //         'images/d1.png',
    //         'images/d2.png',
    //         'images/d3.png',
    //         'images/d4.png',
    //         'images/d5.png',
    //         'images/d5.png',
    //         'images/d5.png',
    //         'images/d5.png',
    //         'images/d5.png',
    //         'images/d5.png',
    //         'images/d5.png',
    //         'images/d5.png',
    //     ],
    //     num: 8
    // },
    // dropType: null,

    // 活动的地址
    link: '',
    name: '',

    // 活动的接口
    toolInfoUrl: '',

    // startTime: [2018, 1, 25],
    // endTime: [2018, 2, 22],  // 晚一天
    startTime: [2019, 4, 30],
    endTime: [2019, 5, 3],
    checkActivityState: function () {
        // 活动屏蔽字段
        if (SDW_WEB.readParam('sdw_ac')) {
            return false;
        }

        var now = +new Date();

        var _s = ActivityConfig.startTime;
        var startTimeObj = new Date();
        startTimeObj.setFullYear(_s[0]);
        startTimeObj.setMonth(_s[1] - 1);
        startTimeObj.setDate(_s[2]);
        startTimeObj.setHours(0);
        startTimeObj.setMinutes(0);
        startTimeObj.setSeconds(0);
        var startTime = +startTimeObj;
        var _e = ActivityConfig.endTime;
        var endTimeObj = new Date();
        endTimeObj.setFullYear(_e[0]);
        endTimeObj.setMonth(_e[1] - 1);
        endTimeObj.setDate(_e[2]);
        endTimeObj.setHours(0);
        endTimeObj.setMinutes(0);
        endTimeObj.setSeconds(0);
        var endTime = +endTimeObj;
        if (now < startTime) {
            return 1;
        }
        if (startTime <= now && now < endTime) return 2;

        if (now > endTime) {
            return false;
        }
        return false;
    }
};
var state = ActivityConfig.checkActivityState();
ActivityConfig.openState = state;
ActivityConfig.state = state ? ActivityConfig.toolIconType + '-' + state : false;
window._ActivityConfig = ActivityConfig;

module.exports = ActivityConfig;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(15)

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(11),
  /* template */
  __webpack_require__(18),
  /* scopeId */
  null,
  /* cssModules */
  null
)

module.exports = Component.exports


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(14)

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(12),
  /* template */
  __webpack_require__(17),
  /* scopeId */
  null,
  /* cssModules */
  null
)

module.exports = Component.exports


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(16)

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(13),
  /* template */
  __webpack_require__(19),
  /* scopeId */
  null,
  /* cssModules */
  null
)

module.exports = Component.exports


/***/ }),
/* 10 */
/***/ (function(module, exports) {

/**
 * Created by CHEN-BAO-DENG on 2017/3/15.
 *
 * 页面滚动事件构造函数，可实现页面滚动的相关执行函数
 *
 * var scroll = new WindowScroll(function(){
 *
 * })
 *
 * @param callback  {Function}  滚动到底部的回调函数
 * @param type      {Boolean}   是否到达底部执行
 * @param delayTime {Number}    每次执行间隔
 * @param offset    {Number}    距离底部多少间隔触发
 * @constructor
 */
function WindowScroll(callback, type, delayTime, offset) {

    if (typeof callback != 'function') {
        console.log('WindowScroll error: callback must be a Function!');
        return;
    }

    this.toBottom = type || false;

    this.enable = true;
    this.callback = callback || null;
    this.delayTime = delayTime || 200;
    this.offset = offset || 200;

    this.clientHeigth = document.documentElement.clientHeight || document.body.clientHeight;

    this._init();
}

/**
 * 初始化
 * @private
 */
WindowScroll.prototype._init = function () {

    var self = this;
    self.timer = null;

    if (!self.callback) return;

    window.addEventListener('scroll', function (e) {

        if (!self.enable) return;

        var nowScrollHeight = document.body.scrollTop + self.clientHeigth;
        var totalScrollHeight = document.documentElement.scrollHeight - self.offset;

        var hasToBottom = nowScrollHeight >= totalScrollHeight;
        var execute = self.toBottom == true && hasToBottom || self.toBottom == false;

        if (execute && !self.timer) {

            self.timer = setTimeout(function () {
                self.callback(e);
                self.timer = null;
            }, self.delayTime);
        }
    }, false);
};

/**
 * 设置回调函数
 * @param callback {Function}
 */
WindowScroll.prototype.setCallback = function (callback) {

    if (typeof callback == 'function') {
        self.callback = callback;
    } else {
        console.log('[WindowScroll error]: callback must be a Function!');
    }
};

WindowScroll.prototype.runCallback = function () {

    this.callback && this.callback();
};

module.exports = WindowScroll;

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ __webpack_exports__["default"] = ({
    name: 'task-item',
    data: function () {
        return {};
    },
    //        props: ['gameItem', 'showMore'],
    methods: {},
    computed: {}
});

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ __webpack_exports__["default"] = ({
    name: 'long-game-item',
    data: function () {
        return {
            msg: 'long-game-item.vue'
        };
    },
    props: ['gameItem'],
    methods: {
        /**
         * 点击【开完】进行授权校验
         */
        checkAuth: function (type, id, item) {
            this.$emit("tap-game", type, id, item);
        },

        transPvNum: function (num) {

            num = num || 0;

            var big, small;

            if (num < 10000) return num;

            if (num < 100000000) {
                big = num / 10000 >> 0;
                small = num % 10000 + '';

                if (small == 0) {
                    return big + '万';
                }

                return big + '.' + small[0] + '万';
            }

            if (num < 10000000000) {
                big = num / 100000000 >> 0;
                small = num % 100000000 + '';

                if (small == 0) {
                    return big + '亿';
                }

                return big + '.' + small[0] + '亿';
            }
        }

    },
    computed: {
        tags: function () {

            var colorMap = {
                '热门': 'g-l-5',
                '精品': 'g-l-3',
                '礼包': 'g-l-4',
                '最新': 'g-l-1',
                '独家': 'g-l-2',
                '首发': 'g-l-6',
                '删档': 'g-l-7',
                '限号': 'g-l-8',
                '封测': 'g-l-9'
            };

            var res = [];

            if (this.gameItem.tip) {
                var _tags = this.gameItem.tip.split(',');
                for (var i = 0; i < _tags.length; i++) {
                    res.push({
                        type: _tags[i],
                        cl: colorMap[_tags[i]]
                    });
                }
            }

            if (this.gameItem.gift) {
                res.push({
                    type: '礼包',
                    cl: 'g-l-4'
                });
            }

            return res;
        }
    }
});

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    name: "recent-game",
    props: ['recommendList'],
    methods: {
        goMorePage: function () {
            var targetUrl = SDW_PATH.MOBILE_ROOT + 'more/?channel=' + SDW_WEB.channel;

            SDW_WEB.openNewWindow({
                link: targetUrl,
                isFullScreen: false,
                showMoreBtn: false,
                title: ''
            });
        },
        checkGameSate: function (type, id, item, btnCount) {
            if (btnCount) {
                SDW_WEB.addCount(btnCount);
            }
            var hasLogin = SDW_WEB.USER_INFO.uid;
            // 获取游戏地址
            var targetUrl = SDW_PATH.GAME_URL(type, id);
            var openObj = {
                link: targetUrl,
                isFullScreen: false,
                showMoreBtn: true,
                title: ''
            };

            if (type === 'play') {

                // 玩游戏
                if (hasLogin) {
                    openObj = SDW_WEB._checkWebViewObject(openObj, item);
                    // 打开玩游戏的界面
                    SDW_WEB.openNewWindow(openObj);
                } else if (SDW_WEB.onShandw) {
                    // 闪电玩登录
                    SDW_WEB.sdw.openLogin({
                        success: function () {}
                    });
                } else {
                    // 普通短信登录
                    this.__showLoginPage();
                }
            } else {
                // 打开游戏的详情，不需要登录*********
                SDW_WEB.openNewWindow(openObj);
            }
        }
    }
});

/***/ }),
/* 14 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 15 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 16 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "game-long-container",
    on: {
      "click": function($event) {
        _vm.checkAuth('', _vm.gameItem.id, _vm.gameItem.url)
      }
    }
  }, [_c('img', {
    staticClass: "long-icon",
    attrs: {
      "src": _vm.gameItem.icon
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "g-long-name"
  }, [_c('span', {
    staticClass: "g-l-name"
  }, [_vm._v(_vm._s(_vm.gameItem.name))]), _vm._v(" "), _vm._l((_vm.tags), function(i) {
    return _c('span', {
      staticClass: "g-l-tag",
      class: i.cl
    }, [_vm._v(_vm._s(i.type))])
  })], 2), _vm._v(" "), _c('div', {
    staticClass: "g-long-info"
  }, [_c('span', {
    staticClass: "g-l-type"
  }, [_vm._v(_vm._s(_vm.gameItem.type))]), _vm._v(" "), _c('span', {
    staticClass: "g-l-play"
  }, [_c('i', {
    staticClass: "s-g-l"
  }, [_vm._v(_vm._s(_vm.transPvNum(_vm.gameItem.vPv)))]), _vm._v("人在玩")])]), _vm._v(" "), _c('div', {
    staticClass: "g-long-desc"
  }, [_vm._v(_vm._s(_vm.gameItem.sub))]), _vm._v(" "), _c('div', {
    staticClass: "game-btn g-l-right",
    on: {
      "click": function($event) {
        if ($event.target !== $event.currentTarget) { return null; }
        $event.stopPropagation();
        _vm.checkAuth('play', _vm.gameItem.id, _vm.gameItem)
      }
    }
  }, [_vm._v("开玩")])])
},staticRenderFns: []}

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _vm._m(0)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "loading-container"
  }, [_c('div', {
    staticClass: "loading-more"
  }, [_c('i', {
    staticClass: "icon-loading"
  }), _vm._v(" "), _c('span', {
    staticClass: "loading-text"
  }, [_vm._v("努力加载中...")])])])
}]}

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return (_vm.recommendList.length) ? _c('div', {
    staticClass: "recommend-container"
  }, [_vm._m(0), _vm._v(" "), _vm._l((_vm.recommendList), function(item) {
    return _c('div', {
      staticClass: "recommend-list",
      on: {
        "click": function($event) {
          _vm.checkGameSate('play', item.id, item)
        }
      }
    }, [_c('img', {
      staticClass: "recommend-cover",
      attrs: {
        "src": item.icon
      }
    })])
  }), _vm._v(" "), _c('div', {
    staticClass: "recommend-more",
    on: {
      "click": function($event) {
        $event.stopPropagation();
        if ($event.target !== $event.currentTarget) { return null; }
        _vm.goMorePage()
      }
    }
  })], 2) : _vm._e()
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "recommend-list2"
  }, [_c('b', [_vm._v("玩过")])])
}]}

/***/ }),
/* 20 */,
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Created by CHEN-BAO-DENG on 2017/2/23.
 *
 * 闪电玩首页
 *
 */
// var ScrollDom = require('./ScrollDom');
__webpack_require__(5);
__webpack_require__(3);
var loadingView = __webpack_require__(7);
// var longGameItem = require('./long-game-item/long-game-item.vue');
var longGameItem = __webpack_require__(8);
var WindowScroll = __webpack_require__(10);
var recentGame = __webpack_require__(9);
// var ActivityConfig = require('./config');
var ActivityConfig = __webpack_require__(6);
// 首页活动悬浮按钮
if (ActivityConfig.state) {
    __webpack_require__(4);
    var DragTouch = __webpack_require__(1);
}
if (ActivityConfig.dropType) {
    var DropAnimation = __webpack_require__(2);
}
// 初始化活动小浮窗
function initToolIcon() {

    if (!ActivityConfig.state) return;
    /*新建一个拖动对象*/
    window.touch = new DragTouch({
        id: '#my-menu',
        position: '1,0.5',
        notRotate: true,
        width: 80,
        height: 90
    });
    window.touch.target.style.visibility = 'visible';

    var startPoint = null;
    var endPoint = null;

    function getPosition(e) {
        var touch = e.touches[0];
        return {
            x: touch.clientX,
            y: touch.clientY
        };
    }

    var myMenu = document.querySelector('#menu-btn');

    myMenu.addEventListener('touchstart', function (e) {
        startPoint = getPosition(e);
        startPoint.time = +new Date();
        endPoint = null;
    }, false);

    myMenu.addEventListener('touchmove', function (e) {
        endPoint = getPosition(e);
        endPoint.time = +new Date();
    }, false);

    myMenu.addEventListener('touchend', function (e) {
        endPoint = endPoint || startPoint;
        var dT = endPoint.time - startPoint.time;
        var dX = endPoint.x - startPoint.x;
        var dY = endPoint.y - startPoint.y;
        var dd = dX * dX + dY * dY;

        if (dT <= 300 && dd <= 36) {

            // 统计赛事按钮
            SDW_WEB.addCount('saishiIndex');

            // setTimeout(function () {
            //     location.href = 'http://www.shandw.com/activities/competition/index.html?channel=' + SDW_WEB.channel;
            // }, 100);

            var links = ActivityConfig.activityPage + '?channel=' + SDW_WEB.channel;
            if (ActivityConfig.openState == 1) {
                dialog.show('ok', '敬请期待<br>' + ActivityConfig.activityName + '活动将于' + ActivityConfig.startTime[1] + '月' + ActivityConfig.startTime[2] + '号开启哦~！', 1);
                // dialog.show('ok','敬请期待<br>新年活动将于2月2号开启哦~！',1);
                return;
            }

            if (SDW_WEB.USER_INFO && SDW_WEB.USER_INFO.uid) {
                // 跳转到活动页面
                SDW_WEB.openNewWindow({
                    link: links,
                    isFullScreen: false,
                    showMoreBtn: true
                    // title: ActivityConfig.name
                });
            } else {
                // console.log('no login');

                // 调用登录界面
                if (SDW_WEB.onShandw) {
                    // 闪电玩登录
                    SDW_WEB.sdw.openLogin({
                        success: function () {}
                    });
                } else {
                    // 普通短信登录
                    _indexView.__showLoginPage();
                }
            }
        }
    }, false);
}

var indexData = {
    onJD: SDW_WEB.onJDJR,
    activity: ActivityConfig,
    allGameList: [],
    recentList: [],
    pageHasLoading: false,
    navList: [{
        title: "全部",
        page: 0,
        loaded: false,
        loading: false,
        current: 0,
        list: []
        // type: null,
    }],
    currentNav: null
};

function loadImg(arr, not) {
    for (var i = 0, len = arr.length; i < len; i++) {
        if (arr[i].getBoundingClientRect().top < document.documentElement.clientHeight && !arr[i].isLoad) {
            arr[i].isLoad = true;
            arr[i].dataset.loaded = '1';
            !not && (arr[i].style.cssText = "transition: ''; opacity: 0;");
            aftLoadImg(arr[i], arr[i].dataset.src, not);
        }
    }
}

function aftLoadImg(obj, url, not) {
    if (!url) return;
    var oImg = new Image();
    oImg.onload = function () {
        obj.src = oImg.src;
        !not && (obj.style.cssText = "transition: 1s; opacity: 1;");
        var parentNode = obj.parentNode;
        if (parentNode && (hasClass(parentNode, 'game-cover-info') || hasClass(parentNode, 'recommend-list'))) {

            parentNode.style.transition = '.4s';
            parentNode.style.background = 'rgba(0,0,0,0)';
        }
    };
    oImg.src = url;

    function hasClass(node, className) {
        return node.classList.contains(className);
    }
}

var indexMethods = {
    switchNav: function (item) {

        this.currentNav = item; // 保存当前的导航信息

        for (var i = 0; i < this.navList.length; i++) {
            var _item = this.navList[i];
            if (_item.title === item.title) {
                _item.current = 1;
                // 首次加载数据
                if (_item.page === 0) {
                    this.loadTypeGame(_item);
                }
            } else {
                _item.current = 0;
            }
        }
    },

    checkGameSate: function (type, id, item) {

        // 获取游戏地址
        if (SDW_WEB.channel == '10911') {
            var targetUrl = 'http://www.shandw.com/maopao/game/index.html?gid=' + id + '&channel=10911';
        } else {
            var targetUrl = SDW_PATH.GAME_URL(type, id);
        }

        var openObj = {
            link: targetUrl,
            isFullScreen: false,
            showMoreBtn: true,
            title: ''
        };

        if (type === 'play') {
            openObj = SDW_WEB._checkWebViewObject(openObj, item);
            // 打开玩游戏的界面
            SDW_WEB.openNewWindow(openObj);
        }
    },
    goMorePage: function () {
        var targetUrl = SDW_PATH.MOBILE_ROOT + 'more/?channel=' + SDW_WEB.channel;

        SDW_WEB.openNewWindow({
            link: targetUrl,
            isFullScreen: false,
            showMoreBtn: false,
            title: ''
        });
    },
    createBanner: function (data) {

        var banner = data.ad || [];

        var TEMP_HTML = '<img data-src=D_IMG class="swiper-slide slider-img" data-index=D_INDEX data-loaded="5">';

        var allInners = '';
        banner.forEach(function (item, index) {

            if (SDW_WEB.channel == '10041') {
                var inners = TEMP_HTML.replace(/D_IMG/, item['670x280']).replace(/D_INDEX/, index);
            } else {
                var inners = TEMP_HTML.replace(/D_IMG/, item.adImg).replace(/D_INDEX/, index);
            }

            allInners += inners;
        });

        document.querySelector('#bannercont').innerHTML = allInners;
        return banner;
    },

    loadMainData: function () {

        var self = this;
        var postUri = SDW_WEB.URLS.addParam({
            channel: SDW_WEB.channel,
            uid: SDW_WEB.USER_INFO.uid,
            token: SDW_WEB.USER_INFO.token,
            sec: SDW_WEB.USER_INFO.secheme,
            type: 1,
            flag: 1
        }, false, HTTP_STATIC + 'pltmain');

        SDW_WEB.getAjaxData(postUri, function (data) {
            if (data.recent) {
                self.recentList = data.recent.splice(0, 3);
            }

            self.bannerList = self.createBanner(data);
            var swiper = new Swiper('.banner-conatiner', {
                pagination: '.swiper-pagination',
                effect: 'coverflow',
                grabCursor: true,
                centeredSlides: true,
                slidesPerView: 'auto',
                loop: true,
                autoplay: 5000,
                autoplayDisableOnInteraction: false,
                coverflow: {
                    rotate: 45,
                    stretch: 0,
                    depth: 145,
                    modifier: 1,
                    slideShadows: true
                }
            });

            if (self.bannerList.length) {
                var imgSrc = self.bannerList[0].adImg;
                document.querySelector('#topBanner').src = imgSrc;
            }

            self.$nextTick(function () {
                // var goBackBtn = document.querySelector('#goBackBtn');
                setTimeout(function () {
                    var aImages2 = document.querySelectorAll('img[data-loaded="5"]');
                    loadImg(aImages2, true);
                    var bannerImg = document.querySelectorAll('.slider-img');
                    for (var i = 0; i < bannerImg.length; i++) {
                        // 轮播图的点击事件
                        bannerImg[i].onclick = function () {
                            self.clickBannerEvt(this.dataset.index);
                        };
                    }
                }, 200);
            });
            initToolIcon();
        });
    },

    // 加载数据
    loadListData: function (postUri, item) {
        SDW_WEB.getAjaxData(postUri, function (data) {
            if (data.result === 1) {
                if (data.list && data.list.length) {
                    item.list = item.list.concat(data.list);
                } else {
                    item.loaded = true;
                }
                item.page++;
            }

            item.loading = false;
        });
    },

    // loadAllGameList: function (item) {
    //
    //     if (item.loading) return;
    //     item.loading = true;
    //
    //     var postUri = SDW_WEB.URLS.addParam({
    //         page: item.page,
    //     }, false, HTTP_STATIC + 'search');
    //
    //     this.loadListData(postUri, item);
    //
    // },
    gotoTopFn: function () {
        // 1表示滚动到顶部后，收起导航栏
        document.documentElement.scrollTop = document.body.scrollTop = 0;
        //scrollDom && scrollDom.scrollToPos(0, '1');
    },
    loadTypeGame: function (item) {
        if (item.loading) return;
        item.loading = true;
        var data = {
            page: item.page,
            pagesize: 12
        };
        item.type ? data.type = item.type : '';
        var postUri = SDW_WEB.URLS.addParam(data, false, HTTP_STATIC + 'search');

        this.loadListData(postUri, item);
    },

    // 轮播图的点击
    clickBannerEvt: function (index) {
        // 轮播有不同的状态，具体跳转什么有个定义的值
        if (this.bannerList[index].url) {
            // 读取轮播上的跳转地址
            var links = this.bannerList[index].url;
            if (links.indexOf('?') === -1) {
                links += '?channel=' + SDW_WEB.channel;
            } else {
                links += '&channel=' + SDW_WEB.channel;
            }
            // 打开玩游戏的界面
            SDW_WEB.openNewWindow({
                link: links,
                isFullScreen: false,
                showMoreBtn: true,
                title: ''
            });
        } else {
            this.checkGameSate('play', this.bannerList[index].id);
        }
    },

    loadMore: function () {
        var item = this.currentNav;
        if (item.loaded) return;
        this.loadTypeGame(item);
    },
    moreNav: function () {
        var navCtx = this.$refs.navCtx;
        console.log(navCtx.scrollWidth, navCtx.scrollLeft + navCtx.scrollWidth / 3);
        navCtx.scrollLeft = Math.min(navCtx.scrollWidth, navCtx.scrollLeft + navCtx.scrollWidth / 4);
    }
};

var _indexView = new Vue({
    el: '#app',
    data: indexData,
    methods: indexMethods,
    mounted: function () {
        var navlist = ['传奇类', '回合制', '古装仙侠', '休闲小游戏', '角色扮演', '策略', '放置挂机', '模拟经营', '卡牌', '女生'];
        navlist.forEach(i => {
            this.navList.push({
                title: i,
                page: 0,
                loaded: false,
                loading: false,
                current: 0,
                list: [],
                type: i
            });
        });
    },
    components: {
        loadingView: loadingView,
        longGameItem: longGameItem,
        recentGame: recentGame
    }
});

SDW_WEB.getSdwUserData().then(function (userData) {
    _indexView.loadMainData();
    _indexView.switchNav(indexData.navList[0]);
}, function (msg) {
    // 获取闪电玩用户数据失败
    SDW_WEB.USER_INFO = {};
    _indexView.loadMainData();
    _indexView.getRecentList();
    _indexView.switchNav(indexData.navList[0]);
});

// 加载更多
var allGameScroll = new WindowScroll(function () {
    _indexView.loadMore();
}, true, 100, 30);
// allGameScroll.enable = false;

var _sliderTimerInterval = 50;

function addScrollFn() {

    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

    document.documentElement.scrollTop = document.body.scrollTop = 0;

    var sliderNavLists,
        sliderTop,
        sliderNavDom,
        goBackBtn = document.querySelector('#goBackBtn');
    var nowIdx = null;
    var sliderNavDomHasFixed = false;
    var goBackBtnHasHidden = false;

    // 需要继续优化滚动函数！！！
    var sliderFn = function () {

        setTimeout(function () {
            window.requestAnimationFrame(sliderFn);
        }, _sliderTimerInterval);

        var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;

        // 实时显示导航栏的位置，防止多次的变更DOM
        if (scrollTop > sliderTop) {
            if (!sliderNavDomHasFixed) {
                sliderNavDomHasFixed = true;
                sliderNavDom.className = 'nav-view slider-nav-fixed';
            }
        } else {
            if (sliderNavDomHasFixed) {
                sliderNavDomHasFixed = false;
                sliderNavDom.className = 'nav-view';
            }
        }

        // 快抵达到顶部，收起【返回顶部】
        if (scrollTop <= 10) {
            if (!goBackBtnHasHidden) {
                goBackBtnHasHidden = true;
                goBackBtn.style.display = 'none';
            }
        } else {
            if (goBackBtnHasHidden) {
                goBackBtnHasHidden = false;
                goBackBtn.style.display = 'block';
            }
        }

        // 需要实时判断定位导航栏的位置 ，点击tap的时候，就不要计算了
        // if (_dom && !userTap) {
        //
        //     var offset = _dom.offsetHeight;
        //
        //     for (var i = view.sliderNavList.length - 1; i >= 0; i--) {
        //         var item = view.sliderNavList[i];
        //
        //         var differTop = scrollDom.scrollListPos[item.id] - offset <= scrollTop;
        //
        //         if (scrollTop && scrollDom.scrollListPos[item.id] && differTop) {
        //
        //             // 只是在发生需要变更的时候进行更新
        //             if (nowIdx !== item.id) {
        //                 nowIdx = item.id;
        //                 view.showNavItem(nowIdx);
        //             }
        //             break;
        //         }
        //     }
        // }
    };

    setTimeout(function () {
        sliderNavLists = document.querySelector('.nav-view');
        sliderTop = sliderNavLists.getBoundingClientRect().top || sliderNavLists.offsetTop;
        sliderNavDom = document.querySelector('.nav-view');
        window.requestAnimationFrame(sliderFn);
    }, 20);
}

addScrollFn();

/***/ })
/******/ ]);